def solveNQueens(n: int) -> List[List[str]]:
    def dfs(y: int, xy_dif: int, xy_sum: int) -> None:
        if y == n:
            result.append(["".join(row) for row in board])
            return
        for x in range(n):
            if xy_dif & (1 << x) or xy_sum & (1 << x) or col & (1 << x):
                continue
            board[y][x] = "Q"
            dfs(y+1, (xy_dif | (1 << x)) << 1, (xy_sum | (1 << x)) >> 1, col | (1 << x))
            board[y][x] = "."

    board = [["."] * n for _ in range(n)]
    col = xy_dif = xy_sum = 0
    result = []
    dfs(0, 0, 0)
    return result


This solution uses a depth-first search (DFS) approach to find all possible solutions to the n-queens problem.

The function solveNQueens takes a single argument n which represents the size of the chessboard.
It uses three variables, xy_dif, xy_sum and col to keep track of the positions that are occupied by queens in the diagonals, columns and rows respectively.

The function dfs takes four arguments: y, xy_dif, xy_sum and col representing the current row and the occupation of the diagonals, columns and rows respectively.

The function starts by iterating through the columns of the current row and checking if the current position is occupied by a queen in the diagonals, columns or rows. If the current position is not occupied, a queen is placed at that position and the function is recursively called for the next row.

Once all queens have been placed on the board, the current solution is added to the result list.

Finally, solveNQueens returns the result, which is a list of all possible solutions for the n-queens problem, each solution represented as a list of strings.

This solution has a time complexity of O(n!) which is not efficient for large values of n. However, the space complexity is O(n) which is much better than the other solution like backtracking.
